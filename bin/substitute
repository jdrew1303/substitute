#!/usr/bin/env node

main(process.argv.slice(2));

function main(argv) {
  var _defaults = {
    bind: 8000,
    host: 'localhost',
    quiet: false,
    secret: '0x24FEEDFACEDEADBEEFCAFE',
    basePath: null,
    maxRedirects: 4
  };

  var options = {};

  var getArg = function() {
    var args = argv.shift();
    args = args.split('=');
    if (args.length > 1) {
      argv.unshit(args.slice(1).join('='));
    }
    return args[0];
  };

  var arg, remains = [];

  while (argv.length) {
    arg = getArg();
    switch(arg) {
      case '-h':
      case '--help':
        helpMessage();
        break;
      case '-v':
      case '-V':
      case '--version':
        versionMessage();
        break;

      case '-p':
      case '--port':
      case '-b':
      case '--bind':
        options.bind = argv.shift();
        break;
      case '--host':
        options.host = argv.shift();
        break;
      case '--path':
        options.basePath = argv.shift();
      case '-c':
      case '--config':
        options.config = argv.shift();
        break;
      case '-r':
      case '--redirects':
        options.maxRedirects = parseInt(argv.shift(), 10);
        break;
      case '-s':
      case '--secret':
        options.secret = argv.shift();
        break;
      case '-q':
      case '--quiet':
        options.quiet = true;
        break;

      default:
        remains.push(arg);
        break;
    }
  }

  if (options.config) {
    // reading from config file
    var path = require('path');
    var config = require(path.resolve(options.config));
    config.bind = config.bind || config.port;

    Object.keys(config).forEach(function(key) {
      if (!options[key]) {
        options[key] = config[key];
      }
    });
  }

  Object.keys(_defaults).forEach(function(key) {
    // load default options
    if (!options[key]) {
      options[key] = _defaults[key];
    }
  });

  var createServer = require('..');
  var server = createServer(options.secret, options);
  console.log('Start serving at http://' + options.host + ':' + options.bind);
  if (!options.quiet) {
    server.on('request', function(req, res) {
      res.on('finish', function() {
        console.log(res.statusCode + ' - ' + req.method + ' - ' + req.url);
      });
    });
  }
  if (parseInt(options.bind)) {
    server.listen(options.bind, options.host);
  } else {
    server.listen(options.bind);
  }
}

function helpMessage() {
  console.log();
  var lines = [
    '  Usage: substitute [options]',
    '',
    '  Options:',
    '',
    '    -b, --bind <port>      The port or unix path to listen',
    '    --host <host>          The hostname to listen [localhost]',
    '    --path <path>          The pathname to listen [null]',
    '    -c, --config <file>    Specify a configuration file',
    '    -r, --redirects <num>  Max redirects allowed, default is 4',
    '    -s, --secret <token>   A secret token to encrypto urls',
    '    -q, --quiet            Do not show request logs',
    '    -V, --version          Display the version',
    '    -h, --help             Display this help menu',
    ''
  ];
  console.log(lines.join('\n'));
  process.exit();
}

function versionMessage() {
  var pkg = require('../package.json');
  console.log(pkg.version);
  process.exit();
}
